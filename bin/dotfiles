#!/usr/bin/ruby -W0
# -*- encoding: utf-8 -*-
require 'pathname'

module Dotfiles
  module StringExtensions

    def normal()  stylize(:normal);  end
    def red()     stylize(:red);     end
    def green()   stylize(:green);   end
    def yellow()  stylize(:yellow);  end
    def blue()    stylize(:blue);    end
    def magenta() stylize(:magenta); end
    def cyan()    stylize(:cyan);    end
    def bold()    stylize(:bold);    end
    def blink()   stylize(:blink);   end

    private

    def stylize(style)
      start_code = case style
      when :normal    then 0
      when :red       then 31
      when :green     then 32
      when :yellow    then 33
      when :blue      then 34
      when :magenta   then 35
      when :cyan      then 36
      when :bold      then 1
      end

      end_code = case style
      when :blink then 25
      when :bold  then 22
      else             0
      end

      %{\033[#{start_code}m#{self}\033[#{end_code}m}
    end

  end
end

class String
  include Dotfiles::StringExtensions
end

module Dotfiles
  module Runtime
    def self.dry_run?
      ARGV.include? '--dry'
    end
  end
end

def homify(file)
  puts file.exist?
  File.write file, file.read.gsub('$HOME', ENV['HOME'])
end

module Dotfiles
  def self.all(&block)
    home_path = Pathname.new('~').expand_path
    Pathname.glob(File.expand_path('../../dotfiles/**/*', __FILE__)) do |config_path|

      path     = config_path.relative_path_from(Pathname.new File.expand_path('../../dotfiles', __FILE__))
      components = []
      path.each_filename { |component| components << component }
      original = home_path.join ".#{components.first}", File.join(components[1..-1])
      destiny  = config_path.expand_path

      yield original, destiny
    end
  end
end

puts
Dotfiles.all do |original, destiny|

  if destiny.directory?
    if !original.exist?
      puts "  Creating directory #{original}"
      original.mkdir unless Dotfiles::Runtime.dry_run?

    elsif !original.directory?
      puts "  WARN: #{original.to_s.bold} should really be a directory, but it isn't.".red
    end

  elsif destiny.file?
    if original.symlink?
      next if original.exist? && original.realpath == destiny
      puts "  Overwriting existing symlink"
      puts "    from   #{original}"
      puts "    was to #{original.readlink.expand_path}"
      puts "    now to #{destiny}"
      original.delete unless Dotfiles::Runtime.dry_run?
      original.make_symlink destiny unless Dotfiles::Runtime.dry_run?
      homify original

    elsif !original.exist?
      puts "  Creating new symlink"
      puts "    from #{original}"
      puts "    to   #{destiny}"
      original.make_symlink destiny unless Dotfiles::Runtime.dry_run?
      homify original

    else
      puts "  Refusing to overwrite"
      puts "    #{original}"
    end

    puts
  end
end

puts "  Dotfiles updated."
puts
